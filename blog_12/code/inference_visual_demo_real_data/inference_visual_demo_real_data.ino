/* 
 *  ei_nano_33_iot_accelerometer_demo
 *  Modified by :Enrique Albertos
 *  Date: 2021-04-11
 *  
 * Edge Impulse Arduino examples
 * Copyright (c) 2021 EdgeImpulse Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


/* needed for Arduino nano 33 IoT with Arduino IDE -------------------------- */
#include <cstdarg>
#define EIDSP_USE_CMSIS_DSP             1  
#define EIDSP_LOAD_CMSIS_DSP_SOURCES    1  
#define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline  
#define __SSAT(ARG1, ARG2) \  
__extension__ \  
({                          \  
  int32_t __RES, __ARG1 = (ARG1); \  
  __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \  
  __RES; \  
 })  
  


/* Includes ---------------------------------------------------------------- */
#include <javagoza-project-1_inference.h>
#include <Arduino_LSM6DS3.h>


#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels


/* Constant defines -------------------------------------------------------- */
#define CONVERT_G_TO_MS2    9.80665f


/* Private variables ------------------------------------------------------- */
static bool debug_nn = false; // Set this to true to see e.g. features generated from the raw signal




/* Logos & images  -------------------------------------------------------- */
#define TITLE_HEIGHT   32
#define TITLE_WIDTH    112
// title logo 8 pixels per Byte Little Endian Horizontal
static const unsigned char PROGMEM designChallengeTitle[] ={
0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00,
0x01, 0x80, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00,
0x00, 0x06, 0x00, 0x00, 0x00, 0x0C, 0xC0, 0x00, 0x00, 0x00, 0x67, 0x3C, 0x79, 0x1F, 0x3E, 0x0F,
0x3C, 0xD0, 0x38, 0x18, 0xCF, 0x11, 0x1C, 0x78, 0x63, 0x7E, 0xD9, 0x9F, 0x3E, 0x0F, 0x6E, 0xF0,
0x6C, 0x18, 0x1F, 0xBB, 0x36, 0x7C, 0x63, 0x66, 0xC9, 0xB3, 0x37, 0x06, 0x66, 0xE0, 0x0C, 0x18,
0x01, 0xBB, 0x72, 0xCC, 0x63, 0x7E, 0xE1, 0xB3, 0x37, 0x06, 0x66, 0xC0, 0x3C, 0x18, 0x07, 0xBB,
0x38, 0xFC, 0x63, 0x7E, 0x79, 0xB3, 0x37, 0x06, 0x66, 0xC0, 0x7C, 0x18, 0xDF, 0xBB, 0x1E, 0xFC,
0x67, 0x60, 0x1D, 0xB3, 0x37, 0x06, 0x66, 0xC0, 0xCC, 0x18, 0xD9, 0xBB, 0x06, 0xC0, 0x66, 0x66,
0xDD, 0x9F, 0x37, 0x06, 0x66, 0xC0, 0xEC, 0x0D, 0xD9, 0xBB, 0x76, 0xEC, 0x7C, 0x3C, 0xF9, 0x9F,
0x37, 0x06, 0x7C, 0xC0, 0x7C, 0x0F, 0x9F, 0x9F, 0x3E, 0x78, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0E, 0x10, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
0x30, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xB0, 0x00,
0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xBF, 0x1E, 0x66, 0x38,
0xB8, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x3F, 0x3F, 0x66, 0x7D, 0xF8, 0xF9,
0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x33, 0x03, 0x66, 0xCC, 0xCD, 0x99, 0xB0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x33, 0x1F, 0x66, 0xFC, 0xCD, 0x9B, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x31, 0xB3, 0x3B, 0x66, 0xE1, 0xCD, 0x9B, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x39, 0xB3, 0x33, 0x66, 0xC4, 0xCD, 0x99, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B,
0xB3, 0x37, 0x66, 0xEC, 0xCC, 0xF9, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x33, 0x3F,
0x66, 0x7C, 0xCC, 0xF9, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


#define EDGEIMPULSE_LOGOWIDTH 128
#define EDGEIMPULSE_LOGOHEIGHT 32
static const unsigned char PROGMEM edgeimpulsearduino [] = {
0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x20, 0x00,
0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x0F, 0xF8, 0x70, 0x00,
0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x00, 0x3F, 0xFE, 0x70, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x7F, 0xFF, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xE1, 0xFF, 0xFF, 0x80, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x07, 0xF3, 0xF8, 0x0F, 0xC0, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x01, 0xF3, 0xE0, 0x07, 0xE0, 0x00,
0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0xFF, 0xC0, 0x03, 0xE0, 0x00,
0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x7F, 0x81, 0x81, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x03, 0xE0, 0x00, 0x3F, 0x01, 0x81, 0xF0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0xC3, 0xF8, 0x3F, 0x07, 0xF0, 0xF0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0xC3, 0xF8, 0x1E, 0x07, 0xF0, 0xF0, 0x00,
0x0F, 0xFF, 0xF8, 0x00, 0x18, 0x00, 0x01, 0x00, 0x03, 0xC3, 0xF8, 0x3F, 0x07, 0xE0, 0xF0, 0x00,
0x3F, 0xFF, 0xFE, 0x1F, 0xFC, 0x00, 0x01, 0x00, 0x03, 0xE0, 0x00, 0x3F, 0x81, 0x81, 0xF0, 0x00,
0x7F, 0xFF, 0xFE, 0x3F, 0xFC, 0x00, 0x03, 0x80, 0x01, 0xE0, 0x00, 0x7F, 0x81, 0x81, 0xE0, 0x00,
0x7F, 0xFF, 0xFF, 0x3F, 0xFE, 0x00, 0x7F, 0xFC, 0x01, 0xF0, 0x00, 0xFF, 0xC0, 0x03, 0xE0, 0x00,
0x7F, 0xFF, 0xFE, 0x3F, 0xFE, 0x00, 0x3F, 0xFC, 0x01, 0xF8, 0x01, 0xF3, 0xE0, 0x07, 0xE0, 0x00,
0x3F, 0xFF, 0xFE, 0x1F, 0xFE, 0x00, 0x01, 0x00, 0x00, 0xFC, 0x07, 0xE1, 0xF8, 0x0F, 0xC0, 0x00,
0x1F, 0xFF, 0xFC, 0x0F, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x7F, 0xFF, 0xE0, 0xFF, 0xFF, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x3F, 0xFF, 0x80, 0x7F, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1F, 0xFF, 0x00, 0x3F, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x0F, 0xF8, 0x00, 0x00,
0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x7F, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x73, 0xCF, 0x13, 0x7D, 0x93, 0x80, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x73, 0xEF, 0xB3, 0x7D, 0x97, 0xC0, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x73, 0x6C, 0xF3, 0x31, 0xF6, 0x60, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0xFB, 0xEC, 0xF3, 0x31, 0xF6, 0x60, 0x00,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0xFB, 0xEC, 0xF3, 0x31, 0xF6, 0x60, 0x00,
0x7F, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0xDB, 0x6F, 0x9F, 0x7D, 0xB7, 0xC0, 0x00,
0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9B, 0x6F, 0x0E, 0x7D, 0x33, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


#define ALERT_WIDTH 40
#define ALERT_HEIGHT 32
static const unsigned char PROGMEM alert [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00,
0x03, 0xFF, 0xC0, 0x00, 0x01, 0x87, 0xFF, 0xE1, 0x80, 0x03, 0xDF, 0x81, 0xFB, 0xC0, 0x03, 0xBE,
0x00, 0x7D, 0xC0, 0x07, 0x78, 0x00, 0x1E, 0xE0, 0x0E, 0x70, 0x3C, 0x0E, 0x70, 0x0E, 0xE0, 0x3C,
0x07, 0x70, 0x0C, 0xE0, 0x3C, 0x07, 0x30, 0x1D, 0xC0, 0x3C, 0x03, 0xB8, 0x19, 0xC0, 0x3C, 0x03,
0x98, 0x19, 0x80, 0x3C, 0x01, 0x98, 0x1B, 0x80, 0x3C, 0x01, 0xD8, 0x1B, 0x80, 0x3C, 0x01, 0xD8,
0x1B, 0x80, 0x3C, 0x01, 0xD8, 0x1B, 0x80, 0x3C, 0x01, 0xD8, 0x19, 0x80, 0x18, 0x01, 0x98, 0x19,
0x80, 0x00, 0x01, 0x98, 0x1D, 0xC0, 0x3C, 0x03, 0xB8, 0x0D, 0xC0, 0x3C, 0x03, 0xB0, 0x0C, 0xE0,
0x3C, 0x07, 0x30, 0x0E, 0xF0, 0x3C, 0x0F, 0x70, 0x07, 0x78, 0x00, 0x1E, 0xE0, 0x07, 0x3C, 0x00,
0x3C, 0xE0, 0x03, 0x9F, 0x00, 0xF9, 0xC0, 0x01, 0x8F, 0xFF, 0xF1, 0x80, 0x00, 0x03, 0xFF, 0xC0,
0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


/* Display variables  -------------------------------------------------------- */
// double buffer for the display
GFXcanvas1 canvas(SCREEN_WIDTH, SCREEN_HEIGHT); // 128x32 pixel canvas


// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)  
#define OLED_RESET -1 // Reset pin # (or -1 if sharing Arduino reset pin)  
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);  


/**
* @brief      Arduino setup function
*/
void setup()
{
    // put your setup code here, to run once:
    Serial.begin(115200);
    Serial.println("Edge Impulse Inferencing Demo");
    delay(1500); // wait for serial


    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
      Serial.println(F("SSD1306 allocation failed"));
      for (;;)
        ; // Don't proceed, loop forever
    }


    blinkLogo(designChallengeTitle, TITLE_WIDTH, TITLE_HEIGHT, 1000);
    
    blinkLogo(edgeimpulsearduino, EDGEIMPULSE_LOGOWIDTH, EDGEIMPULSE_LOGOHEIGHT, 1000);


    if (!IMU.begin()) {
        ei_printf("Failed to initialize IMU!\r\n");
    }
    else {
        ei_printf("IMU initialized\r\n");
    }


    if (EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME != 3) {
        ei_printf("ERR: EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME should be equal to 3 (the 3 sensor axes)\n");
        return;
    }
}


/**
* @brief      Printf function uses vsnprintf and output using Arduino Serial
*
* @param[in]  format     Variable argument list
*/
void ei_printf(const char *format, ...) {
   static char print_buf[1024] = { 0 };


   va_list args;
   va_start(args, format);
   int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
   va_end(args);


   if (r > 0) {
       Serial.write(print_buf);
   }
}


/**
* @brief      Get data and run inferencing
*
* @param[in]  debug  Get debug info if true
*/
void loop()
{
    ei_printf("Sampling...\n");


    // Allocate a buffer here for the values we'll read from the IMU
    float buffer[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = { 0 };


    for (size_t ix = 0; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += 3) {
        // Determine the next tick (and then sleep later)
        uint64_t next_tick = micros() + (EI_CLASSIFIER_INTERVAL_MS * 1000);


        IMU.readAcceleration(buffer[ix], buffer[ix + 1], buffer[ix + 2]);


        buffer[ix + 0] *= CONVERT_G_TO_MS2;
        buffer[ix + 1] *= CONVERT_G_TO_MS2;
        buffer[ix + 2] *= CONVERT_G_TO_MS2;


        delayMicroseconds(next_tick - micros());
    }


    // Turn the raw buffer in a signal which we can the classify
    signal_t signal;
    int err = numpy::signal_from_buffer(buffer, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &signal);
    if (err != 0) {
        ei_printf("Failed to create signal from buffer (%d)\n", err);
        return;
    }


    // Run the classifier
    ei_impulse_result_t result = { 0 };


    err = run_classifier(&signal, &result, debug_nn);
    if (err != EI_IMPULSE_OK) {
        ei_printf("ERR: Failed to run classifier (%d)\n", err);
        return;
    }


    // print the predictions
    ei_printf("Predictions ");
    ei_printf("(DSP: %d ms., Classification: %d ms., Anomaly: %d ms.)",
        result.timing.dsp, result.timing.classification, result.timing.anomaly);
    ei_printf(": \n");
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        ei_printf("    %s: ", result.classification[ix].label);
        Serial.println(result.classification[ix].value, 5);
        
    }
    if(result.classification[1].value>.65f) {
       blinkLogo(alert, ALERT_WIDTH, ALERT_HEIGHT,500);
    } else {
      drawLogo(edgeimpulsearduino, EDGEIMPULSE_LOGOWIDTH, EDGEIMPULSE_LOGOHEIGHT);
    }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("    anomaly score: " );
    Serial.println(result.anomaly, 3);
#endif
}


/**
 * @brief      Send a logo to the Display and center it
 */
void drawLogo(const unsigned char* logo, const int width, const int height ) {
  display.clearDisplay();
  display.drawBitmap(
    (display.width()  - width ) / 2,
    (display.height() - height) / 2,
    logo, width, height, 1);
  display.display();
}




/**
 * @brief      blinks a logo on the display
 */
void blinkLogo(const unsigned char* logo, const int width, const int height, const int blinkPeriod) {
  display.clearDisplay();
  drawLogo(logo, width, height);
  //Invert and restore display, pausing in-between
  display.invertDisplay(true);
  delay(blinkPeriod);
  display.invertDisplay(false);
  delay(blinkPeriod);
}



